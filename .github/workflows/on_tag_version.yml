name: On version tag

on:
  push:
    tags:
      - v* # Push events matching v*, e.g. v2.0.0.

jobs:
  build_frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}    
    - uses: actions/checkout@v2
    - uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DockerUsername }}
        password: ${{ secrets.DockerPassword }}
        repository: collaction/frontend
        tags: ${{ steps.get_version.outputs.VERSION }}
        dockerfile: Frontend/Dockerfile
        path: Frontend

  build_backend:
    runs-on: ubuntu-latest

    steps:
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}    

    - uses: actions/checkout@v2

    - uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DockerUsername }}
        password: ${{ secrets.DockerPassword }}
        repository: collaction/backend
        tags: ${{ steps.get_version.outputs.VERSION }}
        dockerfile: CollAction/Dockerfile

    - uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_API_TOKEN }}

    - name: Terraform Init
      working-directory: ./Terraform/staging
      run: terraform init

    - name: Terraform Format
      working-directory: ./Terraform/staging
      run: terraform fmt -check

    - name: Terraform Plan
      working-directory: ./Terraform/staging
      run: terraform plan
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}      

    - name: Terraform Apply
      working-directory: ./Terraform/staging
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: terraform apply -auto-approve -var 'imageversion=${{ steps.get_version.outputs.VERSION }}'
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}      
